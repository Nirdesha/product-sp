@App:name("PublishHttpInXmlFormatWithCustomMapping")
@App:description('Send events via HTTP transport using xml formatwith custom mapping')


/*
Purpose:
	    This application demonstrates how to configure WSO2 Stream Processor to send production events via HTTP transport in xml format using custom mapping,map the input events($.item.id) to stream events(name), and log the events in LowProducitonAlertStream on the output console.

Prerequisites:
	1) Save this sample.The following message would be shown on the console 
	    * Siddhi App PublishHttpInXmlFormatWithCustomMapping successfully deployed. 

Executing the Sample:
	1) Start the Siddhi application by clicking on 'Run'.
	2) If the Siddhi application starts successfully, the following messages would be shown on the console.
    	* PublishHttpInXmlFormatWithCustomMapping.siddhi - Started Successfully!

	Notes:
	If you edit this application while it's running, save the application and 'Run'.
	If the message "'PublishHttpInXmlFormatWithCustomMapping.siddhi - Started Successfully!" does not appear, it could be due to port 8080, defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
	* Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
	* Change the port 8080 to an unused port, in this Siddhi application's source configuration.
	* Start the application and check whether the specified messages appear on the console.

Testing the Sample:
	Send events to the http endpoint defined by 'publish.url' in Sink configuration. You may send events with http server, curl command or Postman application as follows,

    	Option1: Publish events with http sample server:
             	Navigate to {WSO2SPHome}/samples/sample-clients/http-server and run "ant" command without any arguments.

    	Option2: Publish events with curl command:
             	 * Publish few events in xml format to the http endpoint as follows (The values for name and amount attributes can be changed as desired)
             	 * Open a new terminal and issue the following command
             	    curl -X POST -d "{\"item\":{\"id\":\"toffees\",\"amount\":12.56}}" http://localhost:8080/ --header "Content-Type:application/xml"

Viewing the Results:
	 * Ouput by option1:
	[java] [org.wso2.sp.http.server.HttpServerListener] : Event Name Arrived: <events><event><name>toffee</name><amount>67.43</amount></event></events>
    [java] [org.wso2.sp.http.server.HttpServerMain] : Received Event Names:<events><event><name>toffee</name><amount>67.43</amount></event></events> , 
    [java] [org.wso2.sp.http.server.HttpServerMain] : Received Event Headers key set:[Http_method, Content-type, Content-length]
    [java] [org.wso2.sp.http.server.HttpServerMain] : Received Event Headers value set:[[POST], [application/xml], [76]]
        
    * Output by option 2:
    [java] [org.wso2.sp.http.server.HttpServerListener] : Event Name Arrived: {"item":{"id":"toffee","amount":67.43}}
    [java] [org.wso2.sp.http.server.HttpServerMain] : Received Event Names:{"item":{"id":"toffee","amount":67.43}} , 
    [java] [org.wso2.sp.http.server.HttpServerMain] : Received Event Headers key set:[Accept, Host, User-agent, Content-type, Content-length]
   
	Note:
	Stop this Siddhi application, once you are done with the execution.
*/


define stream SweetProductionStream (name string, amount double);

@sink(type='http', publisher.url='http://localhost:8080/LowProducitonAlertStream',
@map(type='xml', @attributes( name = '$.item.id', amount = '$.item.amount')))
define stream LowProducitonAlertStream (name string, amount double);


from SweetProductionStream
select *
insert into LowProducitonAlertStream;


